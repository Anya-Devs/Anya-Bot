import aiohttp
import asyncio
import csv
import json
import os
from tqdm import tqdm
from pathlib import Path

POKEMON_LIST_URL = "https://pokeapi.co/api/v2/pokemon-species"
POKEMON_SPECIES_URL = "https://pokeapi.co/api/v2/pokemon-species/{}"
OUTPUT_CSV = "data/commands/pokemon/alt_name_v2.csv"
FLAG_MAP_JSON = "data/commands/pokemon/flag_map.json"

FLAG_EMOJI_MAP = {
    "en": "üá¨üáß", "fr": "üá´üá∑", "es": "üá™üá∏", "de": "üá©üá™", "it": "üáÆüáπ", "ja": "üáØüáµ",
    "ko": "üá∞üá∑", "zh-Hans": "üá®üá≥", "ru": "üá∑üá∫", "es-MX": "üá≤üáΩ", "pt": "üáµüáπ",
    "nl": "üá≥üá±", "tr": "üáπüá∑", "ar": "üá∏üá¶", "th": "üáπüá≠", "vi": "üáªüá≥", "pl": "üáµüá±",
    "sv": "üá∏üá™", "da": "üá©üá∞", "no": "üá≥üá¥", "fi": "üá´üáÆ", "el": "üá¨üá∑", "id": "üáÆüá©",
    "ms": "üá≤üáæ", "fil": "üáµüá≠", "hu": "üá≠üá∫", "cs": "üá®üáø", "sk": "üá∏üá∞", "ro": "üá∑üá¥",
    "uk": "üá∫üá¶", "hr": "üá≠üá∑", "bg": "üáßüá¨", "et": "üá™üá™", "lv": "üá±üáª", "lt": "üá±üáπ",
    "sl": "üá∏üáÆ", "mt": "üá≤üáπ", "sq": "üá¶üá±", "mk": "üá≤üá∞", "bs": "üáßüá¶", "sr": "üá∑üá∏",
    "cy": "üá®üáæ", "ga": "üáÆüá™", "gd": "üè¥", "kw": "üá∞üáæ", "br": "üáßüá∑", "af": "üáøüá¶",
    "xh": "üáøüá¶", "zu": "üáøüá¶", "tn": "üáøüá¶", "st": "üáøüá¶", "ss": "üáøüá¶", "nr": "üáøüá¶",
    "nso": "üáøüá¶", "ts": "üáøüá¶", "ve": "üáøüá¶", "xog": "üá∫üá¨", "lg": "üá∫üá¨", "ak": "üá¨üá≠",
    "tw": "üá¨üá≠", "bm": "üáßüá´", "my": "üá≤üá≤", "km": "üá∞üá≠", "lo": "üá±üá¶", "am": "üá™üáπ",
    "ti": "üá™üáπ", "om": "üá™üáπ", "so": "üá∏üá¥", "sw": "üá∞üá™", "rw": "üá∑üáº", "yo": "üá≥üá¨",
    "ig": "üá≥üá¨", "ha": "üá≥üá¨", "bn": "üáßüá©", "pa": "üáÆüá≥", "gu": "üáÆüá≥", "or": "üáÆüá≥",
    "ta": "üáÆüá≥", "te": "üáÆüá≥", "kn": "üáÆüá≥", "ml": "üáÆüá≥", "si": "üá±üá∞", "ne": "üá≥üáµ",
    "dz": "üáßüáπ", "be": "üáßüáæ", "kk": "üá∞üáø", "uz": "üá∫üáø", "ky": "üá∞üá¨"
}

LANG_CODES = list(FLAG_EMOJI_MAP.keys())

async def fetch_json(session, url):
    async with session.get(url) as res:
        return await res.json() if res.status == 200 else None

async def fetch_all_species_names():
    names = []
    url = POKEMON_LIST_URL
    async with aiohttp.ClientSession() as session:
        while url:
            data = await fetch_json(session, url)
            if not data:
                break
            names += [r["name"] for r in data["results"]]
            url = data.get("next")
    return names

async def fetch_species_names_by_lang(species_name, session):
    url = POKEMON_SPECIES_URL.format(species_name)
    data = await fetch_json(session, url)
    if not data:
        return None, {}

    # Map lang_code -> list of names
    lang_name_map = {lang: [] for lang in LANG_CODES}

    for name_entry in data.get("names", []):
        lang = name_entry["language"]["name"]
        if lang in LANG_CODES:
            lang_name_map[lang].append(name_entry["name"])

    # Include varieties (pokemon forms) names too under "en" as fallback
    varieties = data.get("varieties", [])
    for variety in varieties:
        poke_name = variety.get("pokemon", {}).get("name")
        if poke_name:
            lang_name_map["en"].append(poke_name)

    # Deduplicate and join multiple names with comma
    for lang in lang_name_map:
        lang_name_map[lang] = ", ".join(sorted(set(lang_name_map[lang])))

    return species_name, lang_name_map

async def gather_all_alt_names(pokemon_names):
    results = []
    async with aiohttp.ClientSession() as session:
        for species_name in tqdm(pokemon_names, desc="Scanning Pok√©mon species"):
            species, lang_map = await fetch_species_names_by_lang(species_name, session)
            if species is None:
                continue
            row = [species] + [lang_map.get(lang, "") for lang in LANG_CODES]
            results.append(row)
    return results

def write_csv(data):
    Path(os.path.dirname(OUTPUT_CSV)).mkdir(parents=True, exist_ok=True)
    with open(OUTPUT_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        header = ["pokemon_species"] + [f"{FLAG_EMOJI_MAP.get(lang, lang)} ({lang})" for lang in LANG_CODES]
        writer.writerow(header)
        writer.writerows(data)

def write_flag_map():
    Path(os.path.dirname(FLAG_MAP_JSON)).mkdir(parents=True, exist_ok=True)
    with open(FLAG_MAP_JSON, "w", encoding="utf-8") as f:
        json.dump(FLAG_EMOJI_MAP, f, indent=2, ensure_ascii=False)

async def main():
    print("üîç Fetching all Pok√©mon species...")
    species_names = await fetch_all_species_names()
    all_alt_names = await gather_all_alt_names(species_names)
    write_csv(all_alt_names)
    write_flag_map()
    print(f"‚úÖ Done! Saved {len(all_alt_names)} species with alt names by language.")

if __name__ == "__main__":
    asyncio.run(main())
